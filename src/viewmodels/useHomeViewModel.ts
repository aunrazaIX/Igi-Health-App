import {useRef, useState} from 'react';
import {cardIcons, icons} from '../assets';
import {COLORS} from '../assets/theme/colors';
import {Alert, Animated, Linking, Platform} from 'react-native';
import {useNavigation} from '@react-navigation/native';
import {ImageSourcePropType} from 'react-native';
import endpoints from '../api/endspoints';
import useApiHook from '../hooks/useApiHook';
import formatCurrency from '../utils';
import {DrawerNavigationProp} from '@react-navigation/drawer';
import {DrawerStackParamList} from '../navigation/types';
import {useSelector} from 'react-redux';
import {RootState} from '@reduxjs/toolkit/query';
import {PermissionsAndroid} from 'react-native';
import RNHTMLtoPDF from 'react-native-html-to-pdf';
import FileViewer from 'react-native-file-viewer';
import RNFetchBlob from 'rn-fetch-blob';
import RNFS from 'react-native-fs';
import moment from 'moment';

const cancelIconBase64 = ``;

const maternityBase64 = ``;

const cardRoomBase64 = `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`;

export type CardItemData = {
  logo?: ImageSourcePropType;
  name?: string;
  image?: ImageSourcePropType;
  backgroundColor?: string;
  to?: string;
  mainParent?: string;
  stChild?: string;
  type?: string;
};

export type HomeHeaderData = {
  logo: ImageSourcePropType;
  name: string;
  to: string;
};
type ClaimItem = {
  SubmiitedClaim?: number;
  DeductedAmount?: number;
  TotalPaid?: number;
};

type UseHomeViewModelReturn = {
  states: {
    selectedTab: string;
    cardData: CardItemData[];
    frontAnimatedStyle: {};
    backAnimatedStyle: {};
    homeCardData: any;
    claimData: {
      totalClaimAmount: string;
      deductedAmount: string;
      paidAmount: string;
    };
    loading: boolean;
    homeCardDataLoading: any;
  };
  functions: {
    onPressTab: (name: string) => void;
    animateCard: () => void;
    toggleDrawer: () => void;
    onPressMenu: (cardData: CardItemData) => void;
    onPressHeaderIcon: (to: string) => void;
    handleAssociatedApps: (
      url: string | {ios: string; android: string},
    ) => void;
    handleCardDownload: any;
  };
};
type ClaimStats = {
  totalClaimAmount: string;
  deductedAmount: string;
  paidAmount: string;
};

const useHomeViewModel = (): UseHomeViewModelReturn => {
  const user = useSelector((state: RootState) => state.auth.user);

  const navigate = useNavigation<DrawerNavigationProp<DrawerStackParamList>>();
  const [selectedTab, setSelectedTab] = useState<string>('login');
  const [data, setData] = useState<ClaimStats>({
    totalClaimAmount: '0',
    deductedAmount: '0',
    paidAmount: '0',
  });

  const animateValue = useRef(new Animated.Value(0)).current;
  const currentValue = useRef(0);

  animateValue.addListener(({value}) => {
    currentValue.current = value;
  });
  // const {rememberMe, credentials} = useSelector(state => state.auth);

  const generateCardHTML = (data, user) => `
 

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Card</title>
  </head>

  <body>
    <table style="width: 100%">
      <tbody>
        <tr>
          <td>
            <div style="padding: 20px">
              <table style="width: 396px; border-radius: 24px; box-shadow: 0px 2px 12.1px rgba(0,0,0,0.25); padding: 20px; background: #fff; margin: auto; font-size: 16px; color: #393939;">
                <tbody>
                  <tr><td style="padding-bottom: 15px"><img src="data:image/png;base64,${cancelIconBase64}" style="width: 107px; height: 48px" /></td></tr>

                  <tr>
                    <td style="padding-bottom: 5px">
                      <span>Policy Number: </span><span>${
                        data.find(
                          item => item.Policy_Insured_Relaion === 'Member',
                        )?.Policy_Number
                      }</span>
                    </td>
                    <td style="text-align: end; padding-bottom: 5px">
                      <span>Classs: </span><span>${
                        data.find(
                          item => item.Policy_Insured_Relaion === 'Member',
                        )?.Policy_Class
                      }</span>
                    </td>
                  </tr>

                  <tr>
                    <td style="padding-bottom: 5px">
                      <span>CNIC: </span><span>${user?.cnic}</span>
                    </td>
                    <td style="text-align: end; padding-bottom: 5px">
                      <span>Cert No: </span><span>${
                        data.find(
                          item => item.Policy_Insured_Relaion === 'Member',
                        )?.Policy_CertNo
                      }</span>
                    </td>
                  </tr>

                  <tr>
                    <td style="padding-bottom: 5px">
                      <span>Policy Name: </span><span>${
                        data.find(
                          item => item.Policy_Insured_Relaion === 'Member',
                        )?.Policy_Insured_Name
                      }</span>
                    </td>
                    <td style="text-align: end; padding-bottom: 5px">
                      <span>Age: </span><span>${
                        data.find(
                          item => item.Policy_Insured_Relaion === 'Member',
                        )?.Policy_Insured_Age
                      }</span>
                    </td>
                  </tr>

                  <tr><td style="padding: 15px 0 5px">Card Holder Name</td></tr>
                  <tr><td style="font-size: 17px; font-weight: 600">${data
                    ?.find(item => item?.Policy_Insured_Relaion == 'Member')
                    ?.Policy_Insured_Name.trim()}</td></tr>
                </tbody>
              </table>

              <table style="width: 396px; border-radius: 24px; box-shadow: 0px 2px 12.1px rgba(0,0,0,0.25); padding: 20px; background: #fff; margin: 20px auto 0 auto; font-size: 16px; color: #393939;">
                <tbody>
                  <tr style="font-size: 20px">
                    <td style="padding-bottom: 5px; font-weight: 700">
                      Dependent <span style="color: #ee2560">Details</span>
                    </td>
                  </tr>

                  <tr>
                    <td>
                      <table>
                        <tbody>
                          ${data
                            ?.filter(
                              _item =>
                                _item?.Policy_Insured_Relaion !== 'Member',
                            )
                            ?.map(
                              dep => `
                              <tr>
                                <td>${dep?.Policy_Insured_Name?.trim()}:</td>
                                <td>${dep?.Policy_Insured_Age}</td>
                              </tr>`,
                            )
                            .join('')}
                        </tbody>
                      </table>
                    </td>
                    <td>
                      <table style="font-weight: 600">
                        <tr><td style="padding-bottom: 15px">Valid from:</td><td style="padding-bottom: 15px">
                        ${moment(data[0]?.Policy_Start_Date, 'YYYYMMDD').format(
                          'DD-MM-YYYY',
                        )}
                        </td></tr>
                        <tr><td>Valid till:</td><td>

                      ${moment(data[0]?.Policy_Expiry_Date, 'YYYYMMDD').format(
                        'DD-MM-YYYY',
                      )}
                        </td></tr>
                      </table>
                    </td>
                  </tr>

                  <tr>
                    <td>
                      <table>
                        <tbody>
                          <tr>
                            <td><img src="data:image/png;base64,${cardRoomBase64}" style="width: 30px; height: 30px" /></td>
                            <td style="font-size: 14px; padding-left: 5px">
                              <p style="margin: 0">Max. Room & Board</p>
                              <p style="margin: 0">Rs. Per Day: ${
                                data[0]?.Policy_Daily_RoomLimit
                              }</p>
                            </td>
                          </tr>
                        </tbody>
                      </table>
                    </td>
                    <td>
                      <table>
                        <tbody>
                          <tr>
                            <td><img src="data:image/png;base64,${maternityBase64}" style="width: 21px; height: 34px" /></td>
                            <td style="font-size: 14px; padding-left: 5px">
                              <p style="margin: 0">Maternity</p>
                              <p style="margin: 0">${
                                data[0]?.Policy_MatLimit > 0
                                  ? 'Available'
                                  : 'Not Available'
                              }</p>
                            </td>
                          </tr>
                        </tbody>
                      </table>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </td>
        </tr>
      </tbody>
    </table>
  </body>
</html>
`;

  const requestStoragePermission = async () => {
    try {
      if (Platform.OS === 'android' && Platform.Version < 33) {
        const granted = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,
          {
            title: 'Storage Permission',
            message: 'App needs access to storage to save PDF file.',
            buttonNeutral: 'Ask Me Later',
            buttonNegative: 'Cancel',
            buttonPositive: 'OK',
          },
        );
        return granted === PermissionsAndroid.RESULTS.GRANTED;
      } else {
        return true;
      }
    } catch (err) {
      return false;
    }
  };

  const handleCardDownload = async () => {
    try {
      const permissionGranted = await requestStoragePermission();
      if (permissionGranted) {
        const dir = RNFetchBlob.fs.dirs.DocumentDir;
        const filePath = `${dir}/IGIPolicyCard.pdf`;

        const html = generateCardHTML(homeCardData, user);
        const options = {
          html,
          fileName: 'IGIPolicyCard',
          directory: 'Documents',
          base64: true,
        };

        const file = await RNHTMLtoPDF.convert(options);
        const base64Data = file.base64;
        if (!base64Data) throw new Error('PDF generation failed.');
        await RNFetchBlob.fs.writeFile(filePath, base64Data, 'base64');

        Alert.alert(
          'Download Complete ✔',
          'Your policy card has been downloaded. Do you want to open it now?',
          [
            {text: 'Cancel', style: 'cancel'},
            {
              text: 'Open',
              onPress: async () => {
                try {
                  await FileViewer.open(filePath);
                } catch (err) {
                  Alert.alert('Error', 'No app found to open the PDF.');
                }
              },
            },
          ],
          {cancelable: true},
        );
      }
    } catch (e) {
      Alert.alert('Error', 'No PDF app found. Please install a PDF viewer.');
    }
  };

  const animateCard = () => {
    if (currentValue.current >= 90) {
      Animated.timing(animateValue, {
        toValue: 0,
        duration: 800,
        useNativeDriver: true,
      }).start();
    } else {
      Animated.timing(animateValue, {
        toValue: 180,
        duration: 1000,
        useNativeDriver: true,
      }).start();
    }
  };

  const handleAssociatedApps = (
    url: string | {ios: string; android: string},
  ) => {
    if (url) {
      let finalUrl: string;
      if (typeof url === 'object' && url !== null) {
        finalUrl = Platform.OS === 'ios' ? url.ios : url.android;
      } else {
        finalUrl = url;
      }
      Linking.openURL(finalUrl).catch(err =>
        console.error('Failed to open URL:', err),
      );
    }
  };

  const rotateFront = animateValue.interpolate({
    inputRange: [0, 180],
    outputRange: ['0deg', '180deg'],
  });

  const rotateBack = animateValue.interpolate({
    inputRange: [0, 180],
    outputRange: ['180deg', '360deg'],
  });

  const frontAnimatedStyle = {
    transform: [{perspective: 1000}, {rotateY: rotateFront}],
  };

  const backAnimatedStyle = {
    transform: [{perspective: 1000}, {rotateY: rotateBack}],
  };

  // second APi Call

  const {
    data: homeCardData,
    loading: homeCardDataLoading,
    trigger,
  } = useApiHook({
    apiEndpoint: endpoints.policy.getPolicyDetails,
    method: 'get',
    skip: true,
  });

  // 1st api call
  const {data: policyData, loading: Loading} = useApiHook({
    apiEndpoint: endpoints.policy.getPolicyTypes,
    method: 'get',
    argsOrBody: {
      ClientCode: user?.ClientCode,
    },

    onSuccess: res => {
      let policyNumber;

      if (res?.length > 1) {
        res?.forEach(item => {
          if (item?.PolicyCode?.startsWith('G' || 'g')) {
            policyNumber = item?.PolicyCode;
          }
        });
      } else if (res?.length == 1) {
        policyNumber = res[0]?.PolicyCode;
      }

      let apiData = {
        policyCode: policyNumber,
        cnic: user.cnic,
      };
      trigger(apiData);
    },
  });

  const cardData: CardItemData[] = [
    {
      logo: cardIcons.benefits,
      name: 'Entitled Benefits',
      image: icons.forwardArrow,
      backgroundColor: COLORS.cardBackgroundBlue,
      to: 'Benefits',
    },
    {
      logo: cardIcons.personal,
      name: 'Family Details',
      image: icons.forwardArrow,
      backgroundColor: COLORS.cardBackgroundRed,
      to: 'Personal',
    },

    {
      logo: cardIcons.lodgeClaim,
      name: 'Lodge a Claim',
      image: icons.forwardArrow,
      backgroundColor: COLORS.cardBackgroundBlue,
      mainParent: 'Tabs',
      stChild: 'LodgeClaim',
    },
    user?.showPriorApproval && {
      logo: cardIcons.taskDone,
      name: 'Prior Approval',
      image: icons.forwardArrow,
      backgroundColor: COLORS.cardBackgroundLightBlue,
      mainParent: 'Tabs',
      stChild: 'PriorApproval',
      type: 'PriorApproval',
    },
    {
      logo: cardIcons.hospital,
      name: 'Network Hospitals',
      image: icons.forwardArrow,
      backgroundColor: COLORS.cardBackgroundRed,
      to: 'Hospitals',
    },
    {
      logo: cardIcons.discountedCenters,
      name: 'Discount Centers',
      image: icons.forwardArrow,
      backgroundColor: COLORS.cardBackgroundBlue,
      to: 'PanelHospitalList',
    },
    {
      logo: cardIcons.lodgeClaim,
      name: 'Claim History',
      image: icons.forwardArrow,
      backgroundColor: COLORS.cardBackgroundBlue,
      to: 'ClaimHistory',
    },
    {
      logo: cardIcons.helpLine,
      name: 'Helplines',
      image: icons.forwardArrow,
      backgroundColor: COLORS.cardBackgroundLightBlue,
      mainParent: 'Tabs',
      stChild: 'Helpline',
    },

    {
      logo: cardIcons.complaint,
      name: 'Complaint',
      image: icons.forwardArrow,
      backgroundColor: COLORS.cardBackgroundRed,
      link: 'corporate.services@igi.com.pk',
    },
  ].filter(Boolean);

  const {data: rawClaimData, loading} = useApiHook({
    apiEndpoint: endpoints.claimHistory.getAllClaim,
    method: 'get',
    argsOrBody: {userid: '776'},
    onSuccess: res => {
      setData(sortClaimData(res?.Data));
    },
  });

  const onPressTab = (name: string) => setSelectedTab(name);
  const toggleDrawer = () => {
    navigate.toggleDrawer();
  };

  const onPressMenu = (cardData: CardItemData) => {
    if (cardData?.to) {
      navigate.navigate(cardData?.to);
      return;
    }
    if (cardData?.link?.includes('@')) {
      const emailUrl = `mailto:${cardData?.link}`;
      return Linking.openURL(emailUrl).catch(err =>
        Alert.alert('Error', err.message),
      );
    }

    if (cardData?.mainParent) {
      navigate.navigate(cardData?.mainParent, {
        screen: cardData?.stChild,
      });
    }
  };

  const onPressHeaderIcon = (to: string) => {
    if (to) {
      navigate.navigate(to);
    }
  };

  const sortClaimData = (item: ClaimItem[] = []) => {
    const totalClaimAmount = item?.reduce(
      (acc, curr) => acc + (curr?.SubmiitedClaim || 0),
      0,
    );
    const deductedAmount = item?.reduce(
      (acc, curr) => acc + (curr?.DeductedAmount || 0),
      0,
    );
    const paidAmount = item?.reduce(
      (acc, curr) => acc + (curr?.TotalPaid || 0),
      0,
    );

    return {
      totalClaimAmount: formatCurrency(totalClaimAmount),
      deductedAmount: formatCurrency(deductedAmount),
      paidAmount: formatCurrency(paidAmount),
    };
  };

  return {
    states: {
      selectedTab,
      cardData,
      backAnimatedStyle,
      frontAnimatedStyle,
      homeCardData,
      claimData: data,
      loading,
      homeCardDataLoading,
    },
    functions: {
      onPressTab,
      animateCard,
      toggleDrawer,
      onPressMenu,
      onPressHeaderIcon,
      handleAssociatedApps,
      handleCardDownload,
    },
  };
};

export default useHomeViewModel;
